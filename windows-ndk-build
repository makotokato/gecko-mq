# HG changeset patch
# User Makoto Kato <m_kato@ga2.so-net.ne.jp>
# Parent  9f3fcb6752b4e36779e395abef8362f0b0d14e7b

diff --git a/build/moz.configure/windows.configure b/build/moz.configure/windows.configure
--- a/build/moz.configure/windows.configure
+++ b/build/moz.configure/windows.configure
@@ -19,27 +19,35 @@ def valid_windows_version(value):
         if version in (0x603,):
             return version
     except ValueError:
         pass
 
     die('Invalid value for --with-windows-version (%s)', value[0])
 
 
+@depends(c_compiler, host_c_compiler)
+def use_windows_sdk(compiler, host_compiler):
+    # Ideally, we'd actually check for host/target ABI being MSVC, but
+    # that's waiting for bug 1617793.
+    if compiler.type == 'clang-cl' or host_compiler.type == 'clang-cl':
+        return True
+
+
 option(env='WINDOWSSDKDIR', nargs=1,
        help='Directory containing the Windows SDK')
 
 
-@depends('WINDOWSSDKDIR', host, c_compiler)
-def windows_sdk_dir(value, host, compiler):
+@depends('WINDOWSSDKDIR', host, use_windows_sdk)
+def windows_sdk_dir(value, host, use_windows_sdk):
     if value:
         return value
     # Ideally, we'd actually check for host/target ABI being MSVC, but
     # that's waiting for bug 1617793.
-    if host.kernel != 'WINNT' or compiler.type != 'clang-cl':
+    if host.kernel != 'WINNT' or not use_windows_sdk:
         return ()
 
     return set(x[1] for x in get_registry_values(
         r'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots'
         r'\KitsRoot*', get_32_and_64_bit=True))
 
 # The Windows SDK 8.1 and 10 have different layouts. The former has
 # $SDK/include/$subdir, while the latter has $SDK/include/$version/$subdir.
@@ -91,41 +99,45 @@ def get_sdk_dirs(sdk, subdir):
 
 
 @imports(_from='mozbuild.shellutil', _import='quote')
 def valid_windows_sdk_dir_result(value):
     if value:
         return '0x%04x in %s' % (value.version, quote(value.path))
 
 
-@depends(c_compiler, windows_sdk_dir, valid_windows_version, 'WINDOWSSDKDIR')
+@depends(c_compiler, host_c_compiler, windows_sdk_dir, valid_windows_version, 'WINDOWSSDKDIR')
 @checking('for Windows SDK', valid_windows_sdk_dir_result)
 @imports(_from='__builtin__', _import='sorted')
 @imports(_from='__builtin__', _import='Exception')
 @imports(_from='textwrap', _import='dedent')
-def valid_windows_sdk_dir(compiler, windows_sdk_dir, target_version,
+def valid_windows_sdk_dir(compiler, host_compiler, windows_sdk_dir, target_version,
                           windows_sdk_dir_env):
     # Ideally, we'd actually check for host/target ABI being MSVC, but
     # that's waiting for bug 1617793.
-    if compiler.type != 'clang-cl':
+    if compiler.type != 'clang-cl' and host_compiler.type != 'clang-cl':
         return None
+    test_compiler = compiler
+    if test_compiler != 'clang-cl':
+        test_compiler = host_compiler
+
     if windows_sdk_dir_env:
         windows_sdk_dir_env = windows_sdk_dir_env[0]
     sdks = {}
     for d in windows_sdk_dir:
         sdk = get_sdk_dirs(d, 'um')
         if sdk:
             check = dedent('''\
             #include <winsdkver.h>
             WINVER_MAXVER
             ''')
             um_dir = os.path.join(sdk.include, 'um')
             shared_dir = os.path.join(sdk.include, 'shared')
-            result = try_preprocess(compiler.wrapper + [compiler.compiler] +
-                                    compiler.flags +
+            result = try_preprocess(test_compiler.wrapper + [test_compiler.compiler] +
+                                    test_compiler.flags +
                                     ['-X', '-I', um_dir, '-I', shared_dir], 'C',
                                     check, onerror=lambda: '')
             if result:
                 maxver = result.splitlines()[-1]
                 try:
                     maxver = int(maxver, 0)
                 except Exception:
                     pass
@@ -164,25 +176,25 @@ def valid_windows_sdk_dir(compiler, wind
 
 
 @imports(_from='mozbuild.shellutil', _import='quote')
 def valid_ucrt_sdk_dir_result(value):
     if value:
         return '%s in %s' % (value.version, quote(value.path))
 
 
-@depends(windows_sdk_dir, 'WINDOWSSDKDIR', c_compiler)
+@depends(windows_sdk_dir, 'WINDOWSSDKDIR', use_windows_sdk)
 @checking('for Universal CRT SDK', valid_ucrt_sdk_dir_result)
 @imports('os')
 @imports(_from='__builtin__', _import='sorted')
 @imports(_import='mozpack.path', _as='mozpath')
-def valid_ucrt_sdk_dir(windows_sdk_dir, windows_sdk_dir_env, compiler):
+def valid_ucrt_sdk_dir(windows_sdk_dir, windows_sdk_dir_env, use_windows_sdk):
     # Ideally, we'd actually check for host/target ABI being MSVC, but
     # that's waiting for bug 1617793.
-    if compiler.type != 'clang-cl':
+    if not use_windows_sdk:
         return None
     if windows_sdk_dir_env:
         windows_sdk_dir_env = windows_sdk_dir_env[0]
     sdks = {}
     for d in windows_sdk_dir:
         sdk = get_sdk_dirs(d, 'ucrt')
         if sdk:
             version = os.path.basename(sdk.include)
@@ -241,20 +253,20 @@ def valid_ucrt_sdk_dir(windows_sdk_dir, 
     return namespace(
         path=sdk.path,
         include=sdk.include,
         lib=sdk.lib,
         version=version,
     )
 
 
-@depends(c_compiler, host_c_compiler, toolchain_search_path)
+@depends(use_windows_sdk, toolchain_search_path)
 @imports('os')
-def vc_path(c_compiler, host_c_compiler, toolchain_search_path):
-    if c_compiler.type != 'clang-cl' and host_c_compiler.type != 'clang-cl':
+def vc_path(use_windows_sdk, toolchain_search_path):
+    if not use_windows_sdk:
         return
 
     # In clang-cl builds, we need the headers and libraries from an MSVC installation.
     vc_program = find_program('cl.exe', paths=toolchain_search_path)
     if not vc_program:
         die('Cannot find a Visual C++ install for e.g. ATL headers.')
 
     result = os.path.dirname(vc_program)
@@ -296,17 +308,16 @@ def dia_sdk_dir(vc_path, dia_sdk_path):
 @imports('os')
 def include_path(vc_path, windows_sdk_dir, ucrt_sdk_dir, dia_sdk_dir):
     if not vc_path:
         return
     atlmfc_dir = os.path.join(vc_path, 'atlmfc', 'include')
     if not os.path.isdir(atlmfc_dir):
         die('Cannot find the ATL/MFC headers in the Visual C++ directory (%s). '
             'Please install them.' % vc_path)
-
     winrt_dir = os.path.join(windows_sdk_dir.include, 'winrt')
     if not os.path.isdir(winrt_dir):
         die('Cannot find the WinRT headers in the Windows SDK directory (%s). '
             'Please install them.' % windows_sdk_dir.path)
 
     includes = []
     include_env = os.environ.get('INCLUDE')
     if include_env:
diff --git a/testing/mochitest/mochitest_options.py b/testing/mochitest/mochitest_options.py
--- a/testing/mochitest/mochitest_options.py
+++ b/testing/mochitest/mochitest_options.py
@@ -969,21 +969,17 @@ class AndroidArguments(ArgumentContainer
             objdir_xpi_stage = os.path.join(build_obj.distdir, 'xpi-stage')
             if os.path.isdir(objdir_xpi_stage):
                 options.extensionsToInstall = [
                     os.path.join(objdir_xpi_stage, 'mochijar'),
                     os.path.join(objdir_xpi_stage, 'specialpowers'),
                 ]
 
         if options.remoteWebServer is None:
-            if os.name != "nt":
-                options.remoteWebServer = moznetwork.get_ip()
-            else:
-                parser.error(
-                    "you must specify a --remote-webserver=<ip address>")
+            options.remoteWebServer = moznetwork.get_ip()
 
         options.webServer = options.remoteWebServer
 
         if options.app is None:
             options.app = "org.mozilla.geckoview.test"
 
         if build_obj and 'MOZ_HOST_BIN' in os.environ:
             options.xrePath = os.environ['MOZ_HOST_BIN']
diff --git a/testing/mochitest/runjunit.py b/testing/mochitest/runjunit.py
--- a/testing/mochitest/runjunit.py
+++ b/testing/mochitest/runjunit.py
@@ -88,20 +88,17 @@ class JUnitTestRunner(MochitestDesktop):
            Additional initialization required to satisfy MochitestDesktop.startServers
         """
         self._locations = None
         self.server = None
         self.wsserver = None
         self.websocketProcessBridge = None
         self.SERVER_STARTUP_TIMEOUT = 180 if mozinfo.info.get('debug') else 90
         if self.options.remoteWebServer is None:
-            if os.name != "nt":
-                self.options.remoteWebServer = moznetwork.get_ip()
-            else:
-                raise UserError("--remote-webserver must be specified")
+            self.options.remoteWebServer = moznetwork.get_ip()
         self.options.webServer = self.options.remoteWebServer
         self.options.webSocketPort = '9988'
         self.options.httpdPath = None
         self.options.keep_open = False
         self.options.pidFile = ""
         self.options.subsuite = None
         self.options.xrePath = None
         if build_obj and 'MOZ_HOST_BIN' in os.environ:
diff --git a/testing/mozbase/mozdevice/mozdevice/adb.py b/testing/mozbase/mozdevice/mozdevice/adb.py
--- a/testing/mozbase/mozdevice/mozdevice/adb.py
+++ b/testing/mozbase/mozdevice/mozdevice/adb.py
@@ -31,17 +31,18 @@ class ADBProcess(object):
     """ADBProcess encapsulates the data related to executing the adb process.
     """
 
     def __init__(self, args):
         #: command argument list.
         self.args = args
 
         #: Temporary file handle to be used for stdout.
-        self.stdout_file = tempfile.NamedTemporaryFile(mode='w+b')
+        #: delete=False is required on Windows's python. (Maybe leak)
+        self.stdout_file = tempfile.NamedTemporaryFile(mode='w+b', delete=False)
 
         #: boolean indicating if the command timed out.
         self.timedout = None
 
         #: exitcode of the process.
         self.exitcode = None
 
         #: subprocess Process object used to execute the command.
@@ -337,16 +338,17 @@ class ADBCommand(object):
                                     adb_process.timedout,
                                     adb_process.exitcode,
                                     output))
 
             return output
         finally:
             if adb_process and isinstance(adb_process.stdout_file, io.IOBase):
                 adb_process.stdout_file.close()
+                os.remove(adb_process.stdout_file.name)
 
 
 class ADBHost(ADBCommand):
     """ADBHost provides a basic interface to adb host commands
     which do not target a specific device.
 
     :param str adb: path to adb executable. Defaults to 'adb'.
     :param str adb_host: host of the adb server.
diff --git a/testing/mozbase/moznetwork/moznetwork/moznetwork.py b/testing/mozbase/moznetwork/moznetwork/moznetwork.py
--- a/testing/mozbase/moznetwork/moznetwork/moznetwork.py
+++ b/testing/mozbase/moznetwork/moznetwork/moznetwork.py
@@ -14,16 +14,18 @@ import subprocess
 import sys
 
 import mozinfo
 import mozlog
 
 if mozinfo.isLinux:
     import fcntl
 
+if mozinfo.isWin:
+    import os
 
 class NetworkError(Exception):
     """Exception thrown when unable to obtain interface or IP."""
 
 
 def _get_logger():
     logger = mozlog.get_default_logger(component='moznetwork')
     if not logger:
@@ -104,16 +106,31 @@ def _parse_ifconfig():
     addrs = _proc_matches(['ifconfig'],
                           r'inet (\d+.\d+.\d+.\d+)')
     try:
         return [addr for addr in addrs if not addr.startswith('127.')][0]
     except IndexError:
         return None
 
 
+def _parse_winnet():
+    logger = _get_logger()
+    logger.debug('Parsing GetNetIPAdress using PowerShell')
+
+    try:
+        cmd = os.path.join(os.environ.get('SystemRoot', 'C:\WINDOWS'), 'system32', 'windowspowershell', 'v1.0', 'powershell.exe')
+        output = subprocess.check_output([cmd, '(Get-NetIPAddress | Sort-Object InterfaceIndex | Format-List -Property IPAddress)']).decode('ascii')
+        ips = re.findall(r'IPAddress : (\d+.\d+.\d+.\d+)', output)
+        for ip in ips:
+             if not ip.startswith('127.'):
+                 return ip
+    except:
+        return None
+
+
 def get_ip():
     """Provides an available network interface address, for example
        "192.168.1.3".
 
        A `NetworkError` exception is raised in case of failure."""
     logger = _get_logger()
     try:
         hostname = socket.gethostname()
@@ -143,16 +160,18 @@ def get_ip():
             for ifconfig in interfaces:
                 logger.debug('Interface: [%s] %s' % (ifconfig[0], ifconfig[1]))
                 if ifconfig[0] == 'lo':
                     continue
                 else:
                     return ifconfig[1]
         elif mozinfo.isMac:
             ip = _parse_ifconfig()
+        elif mozinfo.isWin:
+            ip = _parse_winnet()
 
     if ip is None:
         raise NetworkError('Unable to obtain network address')
 
     return ip
 
 
 def get_lan_ip():
