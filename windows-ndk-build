# HG changeset patch
# User Makoto Kato <m_kato@ga2.so-net.ne.jp>
# Parent  916497e295fe6c3b5e8082045add889fd555dff6

diff --git a/build/moz.configure/windows.configure b/build/moz.configure/windows.configure
--- a/build/moz.configure/windows.configure
+++ b/build/moz.configure/windows.configure
@@ -23,26 +23,34 @@ def valid_windows_version(value):
         if version in (0x603,):
             return version
     except ValueError:
         pass
 
     die("Invalid value for --with-windows-version (%s)", value[0])
 
 
+@depends(c_compiler, host_c_compiler)
+def is_windows_sdk_required(compiler, host_compiler):
+    # Ideally, we'd actually check for host/target ABI being MSVC, but
+    # that's waiting for bug 1617793.
+    if compiler.type == 'clang-cl' or host_compiler.type == 'clang-cl':
+        return True
+
+
 option(env="WINDOWSSDKDIR", nargs=1, help="Directory containing the Windows SDK")
 
 
-@depends("WINDOWSSDKDIR", host, c_compiler)
-def windows_sdk_dir(value, host, compiler):
+@depends('WINDOWSSDKDIR', host, is_windows_sdk_required)
+def windows_sdk_dir(value, host, is_windows_sdk_required):
     if value:
         return value
     # Ideally, we'd actually check for host/target ABI being MSVC, but
     # that's waiting for bug 1617793.
-    if host.kernel != "WINNT" or compiler.type != "clang-cl":
+    if host.kernel != "WINNT" or not is_windows_sdk_required:
         return ()
 
     return set(
         x[1]
         for x in get_registry_values(
             r"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Kits\Installed Roots"
             r"\KitsRoot*",
             get_32_and_64_bit=True,
@@ -103,26 +111,26 @@ def get_sdk_dirs(sdk, subdir):
 
 
 @imports(_from="mozbuild.shellutil", _import="quote")
 def valid_windows_sdk_dir_result(value):
     if value:
         return "0x%04x in %s" % (value.version, quote(value.path))
 
 
-@depends(c_compiler, windows_sdk_dir, valid_windows_version, "WINDOWSSDKDIR")
+@depends(c_compiler, host_c_compiler, windows_sdk_dir, valid_windows_version, "WINDOWSSDKDIR")
 @checking("for Windows SDK", valid_windows_sdk_dir_result)
 @imports(_from="__builtin__", _import="Exception")
 @imports(_from="textwrap", _import="dedent")
 def valid_windows_sdk_dir(
-    compiler, windows_sdk_dir, target_version, windows_sdk_dir_env
+    compiler, host_compiler, windows_sdk_dir, target_version, windows_sdk_dir_env
 ):
     # Ideally, we'd actually check for host/target ABI being MSVC, but
     # that's waiting for bug 1617793.
-    if compiler.type != "clang-cl":
+    if compiler.type != 'clang-cl' and host_compiler.type != 'clang-cl':
         return None
     if windows_sdk_dir_env:
         windows_sdk_dir_env = windows_sdk_dir_env[0]
     sdks = {}
     for d in windows_sdk_dir:
         sdk = get_sdk_dirs(d, "um")
         if sdk:
             check = dedent(
@@ -186,24 +194,24 @@ def valid_windows_sdk_dir(
 
 
 @imports(_from="mozbuild.shellutil", _import="quote")
 def valid_ucrt_sdk_dir_result(value):
     if value:
         return "%s in %s" % (value.version, quote(value.path))
 
 
-@depends(windows_sdk_dir, "WINDOWSSDKDIR", c_compiler)
+@depends(windows_sdk_dir, "WINDOWSSDKDIR", c_compiler, host_c_compiler)
 @checking("for Universal CRT SDK", valid_ucrt_sdk_dir_result)
 @imports("os")
 @imports(_import="mozpack.path", _as="mozpath")
-def valid_ucrt_sdk_dir(windows_sdk_dir, windows_sdk_dir_env, compiler):
+def valid_ucrt_sdk_dir(windows_sdk_dir, windows_sdk_dir_env, compiler, host_compiler):
     # Ideally, we'd actually check for host/target ABI being MSVC, but
     # that's waiting for bug 1617793.
-    if compiler.type != "clang-cl":
+    if compiler.type != 'clang-cl' and host_compiler.type != 'clang-cl':
         return None
     if windows_sdk_dir_env:
         windows_sdk_dir_env = windows_sdk_dir_env[0]
     sdks = {}
     for d in windows_sdk_dir:
         sdk = get_sdk_dirs(d, "ucrt")
         if sdk:
             version = os.path.basename(sdk.include)
@@ -407,16 +415,18 @@ def lib_path_for(host_or_target):
         dia_sdk_subdir(host_or_target, "lib"),
     )
     @imports("os")
     def lib_path(
         target, is_host, vc_path, windows_sdk_dir, ucrt_sdk_dir, dia_sdk_lib_dir
     ):
         if not vc_path:
             return
+        if target.kernel != 'WINNT':
+            return
         sdk_target = {
             "x86": "x86",
             "x86_64": "x64",
             "arm": "arm",
             "aarch64": "arm64",
         }.get(target.cpu)
 
         # MSVC2017 switched to use the same target naming as the sdk.
diff --git a/security/nss/lib/freebl/freebl.gyp b/security/nss/lib/freebl/freebl.gyp
--- a/security/nss/lib/freebl/freebl.gyp
+++ b/security/nss/lib/freebl/freebl.gyp
@@ -735,16 +735,16 @@
   'variables': {
     'module': 'nss',
     'conditions': [
       [ 'target_arch=="x64" or target_arch=="arm64" or target_arch=="aarch64"', {
         'have_int128_support%': 1,
       }, {
         'have_int128_support%': 0,
       }],
-      [ 'target_arch=="arm"', {
+      [ 'target_arch=="arm" and OS!="android"', {
         # When the compiler uses the softfloat ABI, we want to use the compatible softfp ABI when enabling NEON for these objects.
         # Confusingly, __SOFTFP__ is the name of the define for the softfloat ABI, not for the softfp ABI.
         'softfp_cflags': '<!(${CC:-cc} -o - -E -dM - ${CFLAGS} < /dev/null | grep __SOFTFP__ > /dev/null && echo -mfloat-abi=softfp || true)',
       }],
     ],
   }
 }
diff --git a/testing/mozbase/mozdevice/mozdevice/adb.py b/testing/mozbase/mozdevice/mozdevice/adb.py
--- a/testing/mozbase/mozdevice/mozdevice/adb.py
+++ b/testing/mozbase/mozdevice/mozdevice/adb.py
@@ -30,17 +30,18 @@ from . import version_codes
 class ADBProcess(object):
     """ADBProcess encapsulates the data related to executing the adb process."""
 
     def __init__(self, args):
         #: command argument list.
         self.args = args
 
         #: Temporary file handle to be used for stdout.
-        self.stdout_file = tempfile.NamedTemporaryFile(mode="w+b")
+        #: delete=False is required on Windows's python. (Maybe leak)
+        self.stdout_file = tempfile.NamedTemporaryFile(mode='w+b', delete=False)
 
         #: boolean indicating if the command timed out.
         self.timedout = None
 
         #: exitcode of the process.
         self.exitcode = None
 
         #: subprocess Process object used to execute the command.
@@ -356,16 +357,17 @@ class ADBCommand(object):
                         output,
                     )
                 )
 
             return output
         finally:
             if adb_process and isinstance(adb_process.stdout_file, io.IOBase):
                 adb_process.stdout_file.close()
+                os.remove(adb_process.stdout_file.name)
 
 
 class ADBHost(ADBCommand):
     """ADBHost provides a basic interface to adb host commands
     which do not target a specific device.
 
     :param str adb: path to adb executable. Defaults to 'adb'.
     :param str adb_host: host of the adb server.
diff --git a/third_party/python/gyp/pylib/gyp/input.py b/third_party/python/gyp/pylib/gyp/input.py
--- a/third_party/python/gyp/pylib/gyp/input.py
+++ b/third_party/python/gyp/pylib/gyp/input.py
@@ -916,17 +916,17 @@ def ExpandVariables(input, phase, variab
                                  cwd=build_file_dir)
           except Exception as e:
             raise GypError("%s while executing command '%s' in %s" %
                            (e, contents, build_file))
 
           p_stdout, p_stderr = p.communicate('')
 
           if p.wait() != 0 or p_stderr:
-            p_stderr_decoded = p_stderr.decode('utf-8')
+            p_stderr_decoded = p_stderr.decode('mbcs')
             sys.stderr.write(p_stderr_decoded)
             # Simulate check_call behavior, since check_call only exists
             # in python 2.5 and later.
             raise GypError("Call to '%s' returned exit status %d while in %s." %
                            (contents, p.returncode, build_file))
           replacement = p_stdout.decode('utf-8').rstrip()
 
         cached_command_results[cache_key] = replacement
